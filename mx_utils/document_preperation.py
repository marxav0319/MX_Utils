"""
A collection of document preperation methods that were helpful for my work.

Author: Mark Xavier
"""

import os
import subprocess
from PyPDF2 import PdfFileMerger


def get_latex_document_start(document_type, packages):
    """
    Generates the latex preamble as a string given the document type to create and the packages to
    use.  Packages may be a string, list, or dictionary.

    Args:
        document_type <str>: The document class to create.
        packages <str, list, dict>: If string, simply add 'usepackage{packages}'.  If a list is
                                    passed, create one line item for each package in the list as
                                    is generated if this arg were a string.  If a dict is passed,
                                    then it is expected that the keys are the package names and the
                                    values are a list of arguments.

    Returns:
        <str>: The latex preamble generated by the given arguments
    """

    preamble = ['\\documentclass{%s}\n\n' % document_type]
    preamble_update = lambda prmbl, package: prmbl.append('\\usepackage{%s}\n' % package)

    # If packages is a string, simply add the package to the preamble
    if isinstance(packages, str):
        preamble_update(preamble, packages)
    else:

        # If packages is a list, add each package to the preamble
        if isinstance(packages, list):
            for package in packages:
                preamble_update(preamble, package)

        # If packages is a list, parse the passed arguments and add them to the preamble
        elif isinstance(packages, dict):
            for package, args in packages.items():
                if not isinstance(args, list):
                    raise TypeError('[*]Error: Values in packages dict should be list of strings.')
                elif not args:
                    preamble_update(preamble, package)
                else:
                    preamble.append('\\usepackage{%s}[%s]\n' % (package, ';'.join(args)))

        else:
            raise TypeError('[*]Error: Incompatible type %s passed to method.' % type(packages))

    preamble.append('\n\\begin{document}\n')
    return ''.join(preamble)

def compile_latex_to_pdf(filepath, output_directory, latex_mode=r'-interaction=nonstopmode',
                         print_to_console=False):
    """
    Given a .tex file, compiles that file into a pdf.  Requires that pdflatex is installed on the
    machine calling this method and is useable by the current user (pdflatex.exe must be available
    in the user's PATH variable).

    Args:
        filepath <str>: The filepath of the .tex file
        output_directory <str>: The full filepath for the output directory (where the .pdf file
                                will be stored).
        latex_mode <str>: The optional arguments for the pdflatex compiler.  Default is to run in
                          nonstopmode with '-interaction=nonstopmode'.
        print_to_console <bool>: Whether to pipe the pdflatex.exe console output to stdout and
                                 stderr or to set them both to os.devnull.

    Returns:
        <None>: Compiles the given .tex file to .pdf.
    """

    output_string = '-output-directory=%s' % output_directory
    call = ['pdflatex', latex_mode, output_string, filepath]
    if print_to_console:
        subprocess.call(call)
    else:
        subprocess.call(call, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

def merge_pdfs(file_list, output_file_name, unlink_files=False):
    """
    Given a list of .pdf files, merges all files into one and optionally removes the individual
    non-merged .pdf input files.

    Args:
        file_list <list>: A list of strings, full filepaths to the .pdf files.
        output_file_name <str>: A string noting the full filepath for the output file (including
                                the full filename and extension '.pdf').
        unlink_files <bool>: Whether or not to delete the files in the file_list after merging them
                             into output_file_name.  Default is False.

    Returns:
        <None>: Write to file.
    """

    # Add files to the PdfFileMerger Object
    merger = PdfFileMerger()
    for filepath in file_list:
        merger.append(file(filepath, 'rb'))

    # Write the file to location passed
    outfile = open(output_filepath, 'wb')
    merger.write(outfile)
    out.close()

    # Clean up input files if called
    if unlink_files:
        unlink_files(file_list)

def clean_out_directory(file_list):
    """
    Deletes the files in file_list.

    Args:
        file_list <list>: A list of strings noting the filepaths to the files to delete.

    Returns:
        <None>: Delete files passed.
    """

    for filepath in file_list:
        os.unlink(filepath)
